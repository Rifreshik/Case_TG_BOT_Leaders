from telegram import Update
from telegram.ext import ContextTypes, CallbackQueryHandler, MessageHandler, filters
from config import GROUP_CHAT_ID, EMOJI, INPUT_SUPPORT_REQUEST
from keyboards import create_main_menu, create_back_button
from models import SupportRequest, async_session
import logging
from datetime import datetime

logger = logging.getLogger(__name__)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    welcome_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n"
        "–Ø - –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
    )

    if update.message:
        await update.message.reply_text(welcome_text, reply_markup=create_main_menu())
    else:
        await update.callback_query.edit_message_text(welcome_text, reply_markup=create_main_menu())

    return INPUT_SUPPORT_REQUEST


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'support':
        await query.edit_message_text(
            f"{EMOJI['support']} –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "–§–ò–û, –°—Ç–∞—Ç—É—Å (–ø–æ–ª—É—Ñ–∏–Ω–∞–ª–∏—Å—Ç/—Ñ–∏–Ω–∞–ª–∏—Å—Ç/–ø–æ–±–µ–¥–∏—Ç–µ–ª—å), "
            "–°–µ–∑–æ–Ω (1-5), –ö–æ–Ω—Ç–∞–∫—Ç—ã (—Ç–µ–ª–µ—Ñ–æ–Ω –∏ Telegram)\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á, —Ñ–∏–Ω–∞–ª–∏—Å—Ç, 3, +79161234567 @username",
            reply_markup=create_back_button()
        )
        return INPUT_SUPPORT_REQUEST

    elif query.data == 'view_requests':
        async with async_session() as session:
            result = await session.execute(select(SupportRequest))
            requests = result.scalars().all()

        if requests:
            requests_text = "\n\n".join([
                f"üìÖ {req.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                f"üë§ {req.full_name} ({req.status}, —Å–µ–∑–æ–Ω {req.season})\n"
                f"üìû {req.contacts}\n"
                f"üìù {req.request_text[:50]}..."
                for req in requests
            ])
            await query.edit_message_text(
                f"{EMOJI['requests']} <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏:</b>\n\n{requests_text}",
                parse_mode='HTML',
                reply_markup=create_back_button()
            )
        else:
            await query.edit_message_text(
                f"{EMOJI['warning']} –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.",
                reply_markup=create_back_button()
            )
        return INPUT_SUPPORT_REQUEST

    elif query.data == 'back':
        return await start(update, context)


async def handle_support_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_input = update.message.text
        user = update.message.from_user

        # –ü–∞—Ä—Å–∏–Ω–≥ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        parts = [part.strip() for part in user_input.split(',')]
        if len(parts) < 4:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")

        full_name, status, season, *contacts = parts
        contacts = ', '.join(contacts)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        async with async_session() as session:
            new_request = SupportRequest(
                user_id=user.id,
                username=user.username,
                full_name=full_name,
                status=status,
                season=int(season),
                contacts=contacts,
                request_text=user_input
            )
            session.add(new_request)
            await session.commit()

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø–ø—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        await context.bot.send_message(
            chat_id=GROUP_CHAT_ID,
            text=(
                f"üÜò <b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç {full_name}</b>\n"
                f"üë§ –°—Ç–∞—Ç—É—Å: {status} (—Å–µ–∑–æ–Ω {season})\n"
                f"üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: {contacts}\n"
                f"üìù –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{user_input}"
            ),
            parse_mode='HTML'
        )

        await update.message.reply_text(
            f"{EMOJI['success']} –ó–∞—è–≤–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ —Å–≤—è–∑–∏ —Å –¥–µ–∂—É—Ä–Ω—ã–º.",
            reply_markup=create_main_menu()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await update.message.reply_text(
            f"{EMOJI['error']} –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
            "–§–ò–û, –°—Ç–∞—Ç—É—Å, –°–µ–∑–æ–Ω, –ö–æ–Ω—Ç–∞–∫—Ç—ã\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á, —Ñ–∏–Ω–∞–ª–∏—Å—Ç, 3, +79161234567 @username",
            reply_markup=create_main_menu()
        )

    return INPUT_SUPPORT_REQUEST